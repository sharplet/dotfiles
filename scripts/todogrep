#!/bin/bash
#
# Find TODO and FIXME directives in the current git repository or directory.
# Exits with a non-zero status if any results are found.
#
# Usage:
#   todogrep [options]
#
# Options:
#   -i <pattern>    Include files matching <pattern> (multiple patterns can be specified)
#   -e <pattern>    Exclude files matching <pattern> (multiple patterns can be specified)
#   -f <format>     Format output: use 'warn' to format like a compiler warning (also preventing a non-zero exit status)
#   -m <mode>       Search mode: defaults to 'git', and falls back to recursively searching files in the current directory

## Finding files

find_files() {
  search_mode=$1

  if [ "${search_mode}" = "git" ] && in_git_dir; then
    git ls-files
  else
    find . -type f | sed 's/^.\///'
  fi
}

in_git_dir() {
  [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1
}

## Filtering files

accept_paths() {
  ([ ${#*} -gt 0 ] && egrep ${*} || exec cat)
}

reject_paths() {
  ([ ${#*} -gt 0 ] && egrep -v ${*} || exec cat)
}

## Formatting output

format_results() {
  mode=$1; shift

  case ${mode} in
    warn|xcode)
      format_warn ${*}
      ;;
    *)
      cat
      ;;
  esac
}

format_warn() {
  anchor=$1

  sed -lnE "s/(($anchor).*)$/warning: \\1/p"
}

## Helpers

nullify() {
  tr "\n" "\0"
}

fail_on_output() {
  ruby -pe 'BEGIN{$ret=0}; $ret=1; END{exit $ret}'
}

## Main

declare -a includes
declare -a excludes
declare format_mode="default"
declare search_mode="git"
declare keywords="FIXME:|TODO:"

while getopts e:i:f:m: opt; do
  case $opt in
    i)
      includes+=("-e")
      includes+=("$OPTARG")
      ;;
    e)
      excludes+=("-e")
      excludes+=("$OPTARG")
      ;;
    f)
      format_mode="$OPTARG"
      ;;
    m)
      search_mode="$OPTARG"
      ;;
  esac
done

shift $((OPTIND - 1))

find_files ${search_mode} \
  | accept_paths ${includes[*]} \
  | reject_paths ${excludes[*]} \
  | nullify \
  | xargs -0 egrep --directories=skip --with-filename --line-number --only-matching "[[:space:]]?($keywords).*$" \
  | format_results ${format_mode} ${keywords} \
  | fail_on_output

code=$?

if [ ${format_mode} = "warn" ]; then
  exit
else
  exit ${code}
fi
